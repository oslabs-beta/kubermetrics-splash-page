{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\n\nclass BaseAccordion extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      openIndexes: [0]\n    });\n\n    _defineProperty(this, \"handleItemClick\", index => {\n      this.internalSetState(state => {\n        const closing = state.openIndexes.includes(index);\n        return {\n          type: closing ? 'closing' : 'opening',\n          openIndexes: closing ? state.openIndexes.filter(i => i !== index) : [...state.openIndexes, index]\n        };\n      });\n      console.log('clicked');\n    });\n  }\n\n  getState(state = this.state) {\n    return {\n      openIndexes: this.props.openIndexes === undefined ? state.openIndexes : this.props.openIndexes\n    };\n  }\n\n  internalSetState(changes, callback = () => {}) {\n    let allChanges;\n    this.setState(state => {\n      const actualState = this.getState(state);\n      const changesObject = typeof changes === 'function' ? changes(actualState) : changes;\n      allChanges = this.props.stateReducer(actualState, changesObject);\n      return allChanges;\n    }, () => {\n      this.props.onStateChange(allChanges);\n      callback();\n    });\n  }\n\n  render() {\n    return this.props.children({\n      openIndexes: this.getState().openIndexes,\n      handleItemClick: this.handleItemClick\n    });\n  }\n\n}\n\n_defineProperty(BaseAccordion, \"defaultProps\", {\n  stateReducer: (state, changes) => changes,\n  onStateChange: () => {}\n});\n\nexport { BaseAccordion };","map":null,"metadata":{},"sourceType":"module"}